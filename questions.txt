[3:20 pm, 31/7/2024] AfsarðŸ‘‘: Day 14 - classes 
Activity 1: Class Definition

Task 1: Define a class Person with properties name and age, and a method to return a greeting message. Create an instance of the class and log the greeting message.

* Task 2: Add a method to the Person class that updates the age property and logs the updated age.

Activity 2: Class Inheritance

* Task 3: Define a class Student that extends the Person class. Add a property student Id and a method to return the student ID.

Create an instance of the Student class and log the student ID

* Task 4: Override the greeting method in the Student class to include the student ID in the message. Log the overridden greeting message.

Activity 3: Static Methods and Properties

Task 5: Add a static method to the Person class that returns a generic greeting message. Call this static method without creating an

instance of the class and log the message. Task 6: Add a static property to the Student class to keep track of the number of students created. Increment this property in the constructor and log the total number of students.

Activity 4: Getters and Setters
* Task 7: Add a getter method to the Person class to return the full name (assume a firstName and lastName property). Create an instance and log the full name using the getter.

* Task 8: Add a setter method to the Person class to update the name properties (firstName and lastName). Update the name using the setter and log the updated full name.

Activity 5: Private Fields (Optional)

Task 9: Define a class Account with private fields for balance and a method to deposit and withdraw money. Ensure that the balance can only be updated through these methods.

Task 10: Create an instance of the Account class and test the deposit and withdraw methods, logging the balance after each operation.
[3:22 pm, 31/7/2024] AfsarðŸ‘‘: Day 15: Closures

Tasks/Activities:

Activity 1: Understanding Closures

Task 1: Write a function that returns another function, where the inner function accesses a variable from the outer function's scope.

Call the inner function and log the result. Task 2: Create a closure that maintains a private counter. Implement functions to increment and get the current value of the counter

Activity 2: Practical Closures

* Task 3: Write a function that generates unique IDs. Use a closure to keep track of the last generated ID and increment it with each

call

Task 4: Create a closure that captures a user's name and returns a function that greets the user by name.

FOR A

Activity 3: Closures in Loops

* Task 5: Write a loop that creates an array of functions. Each function should log its index when called. Use a closure to ensure each function logs the correct index.
Activity 4: Module Pattern

Task 6: Use closures to create a simple module for managing a collection of items. Implement methods to add, remove, and list items.

Activity 5: Memoization

Task 7: Write a function that memoizes the results of another function, Use a closure to store the results of previous computations.

Task 8: Create a memoized version of a function that calculates the factorial of a number.
[3:23 pm, 31/7/2024] AfsarðŸ‘‘: Day 16: Recursion

Tasks/Activities:

Activity 1: Basic Recursion

Task 1: Write a recursive function to calculate the factorial of a number. Log the result for a few test cases,

* Task 2: Write a recursive function to calculate the nth Fibonacci number. Log the result for a few test cases.

Activity 2: Recursion with Arrays

* Task 3: Write a recursive function to find the sum of all elements in an array. Log the result for a few test cases.

* Task 4: Write a recursive function to find the maximum element in an array. Log the result for a few test cases.

HERBA

tani

LLERS EART

LE FOR ALL

Activity 3: String Manipulation with Recursion

* Task 5: Write a recursive function to reverse a string. Log the result for a few test cases.

Task 6: Write a recursive function to check if a string is a palindrome. Log the result for a few test cases.

Activity 4: Recursive Search

* Task 7: Write a recursive function to perform a binary search on a sorted array, Log the index of the target element for a few test cases

Task 8: Write a recursive function to count the occurrences of a target element in an array. Log the result for a few test cases.

Activity 5: Tree Traversal (Optional)
* Task 9: Write a recursive function to perform an in-order traversal of a binary tree. Log the nodes as they are visited.

* Task 10: Write a recursive function to calculate the depth of a binary tree. Log the result for a few test cases.

Feature Request:

1. Factorial and Fibonacci Script: Write a script that includes recursive functions to calculate the factorial and Fibonacci numbers.

2. Array Recursion Script. Create a script that includes recursive functions to find the sum and maximum element of an array 3. String Recursion Script: Write a script that includes recursive functions to reverse a string and check if a string is a palindrome.

Recursive Search Script: Create a script that includes recursive functions for binary search and counting occurrences in an array 4.

5. Tree Traversal Script: Write a script that includes recursive functions for in-order traversal and depth calculation of a binary tree (optional)
[3:24 pm, 31/7/2024] AfsarðŸ‘‘: Day 17: Data Structures

Tasks/Activities:

Activity 1: Linked List

Task 1: Implement a Node class to represent an element in a linked list with properties value and next.

* Task 2: Implement a LinkedList class with methods to add a node to the end, remove a node from the end, and display all nodes.

Activity 2: Stack

Task 3: Implement a Stack class with methods push (add element), pop (remove element), and peek (view the top element).

Task 4: Use the Stack class to reverse a string by pushing all characters onto the stack and then popping them off.

Activity 3: Queue

Task 5: Implement a Queue class with methods enqueue (add element), dequeue (remove element), and front (view the first

element).

* Task 6: Use the Queue class to simulate a simple printer queue where print jobs are added to the queue and processed in order

Activity 4: Binary Tree
* Task 8: Implement a BinaryTree class with methods for inserting values and performing in-order traversal to display nodes.

Activity 5: Graph (Optional)

* Task 9: Implement a Graph class with methods to add vertices, add edges, and perform a breadth-first search (BFS)

* Task 10: Use the Graph class to represent a simple network and perform BFS to find the shortest path between two nodes.

Feature Request:

1. Linked List Script. Write a script that implements a linked list with methods to add, remove, and disply nodes

2. Stack Script: Create a script that implements a stack and uses it to reverse a string 3. Queue Script: Write a script that implements a queue and simulates a printer queue.

4. Binary Tree Script: Create a script that implements a binary tree with insertion and in-order traversal methods

5. Graph Script: Write a script that implements a graph and performs breadth-first search (optional)
[3:26 pm, 31/7/2024] AfsarðŸ‘‘: Day 18: Algorithms

Tasks/Activities:

Activity 1: Sorting Algorithms

Task 1: Implement the bubble sort algorithm to sort an array of numbers in ascending order. Log the sorted array.

Task 2: Implement the selection sort algorithm to sort an array of numbers in ascending orden Log the sorted array

* Task 3: Implement the quicksort algorithm to sort an array of numbers in ascending order. Log the sorted array

Activity 2: Searching Algorithms

Task 4: Implement the linear search algorithm to find a target value in an array. Log the index of the target value.

* Task 5: Implement the binary search algorithm to find a target value in a sorted array Log the index of the target value

Activity 3: String Algorithms

* Task 6: Write a function to count the occurrences of each character in a string. Log the character counts

Task 7: Write a function to find the longest substring without repeating characters in a string Log the length of the substring

Activity 4: Array Algorithms

Task 8: Write a function to rotate an array by k positions Log the rotated array

Task 9: Write a function to merge two sorted arrays into one sorted array. Log the merged array

Activity 5: Dynamic Programming (Optional)
* Task 10: Write a function to solve the Fibonacci sequence using dynamic programming. Log the Fibonacci numbers.

* Task 11: Write a function to solve the knapsack problem using dynamic programming. Log the maximum value that can be obtained.

Feature Request:

1. Sorting Algorithm Script: Write a script that implements bubble sort, selection sort, and quicksort algorithms to sort arrays.

2. Searching Algorithm Script: Create a script that implements linear search and binary search algorithms to find values in arrays.

3. String Algorithm Script: Write a script that counts character occurrences and finds he longest substring without repeating characters.

4. Array Algorithm Script: Create a script that rotates arrays and merges sorted arrays.

5. Dynamic Programming Script: Write a script that solves the Fibonacci sequence and knapsack problem using dynamic programming (optional).
[3:27 pm, 31/7/2024] AfsarðŸ‘‘: Day 19: Regular Expressions

Tasks/Activities:

Activity 1: Basic Regular Expressions

Task 1: Write a regular expression to match a simple pattern (e.g., match all occurrences of the word "JavaScript" in a string). Log the matches.

Task 2: Write a regular expression to match all digits in a string Log the matches.

Activity 2: Character Classes and Quantifiers

Task 3: Write a regular expression to match all words in a string that start with a capital letter. Log the matches.

Task 4: Write a regular expression to match all sequences of one or more digits in a string. Log the matches.

Activity 3: Grouping and Capturing

Task 5: Write a regular expression to capture the area code, central office code, and line number from a US phone number format (eg, (123) 456-7890). Log the captures.

Task 6: Write a regular expression to capture the usemame and domain from an email address. Log the captures.

Activity 4: Assertions and Boundaries

7: Write a regular expression to match a word only if it is at the beginning of a string Log the matches.

Task Task 8: Write a regular expression to match a word only if it is at the end of a string Log the matches
Activity 5: Practical Applications

* Task 9: Write a regular expression to validate a simple password (must include at least one uppercase letter, one lowercase letter, one digit, and one special character). Log whether the password is valid.

* Task 10: Write a regular expression to validate a URL, Log whether the URL is valid.

Feature Request:

1. Basic Regex Script: Write a script that uses regular expressions to match simple patterns and log the matches.

2. Character Classes and Quantifiers Script: Create a script that uses regular expressions to match words with specific characteristics and log the matches.

3. Grouping and Capturing Script: Write a script that uses regular expressions to capture parts of a string, such as phone numbers and

email addresses, and log the captures. 4. Assertions and Boundaries Script Create a script that uses regular expressions to match words at specific positions in a string and log the matches.

5. Validation Script: Write a script that uses regular expressions to validate passwords and URLs and log whether they are valid.